digits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'}
operations = {'+', '-', '*', '/', '^', '_', '|'}
function = {'sin', 'cos', 'tg', 'ctg', 'arcsin', 'arccos', 'arctg', 'arcctg', 'ln', 'arctan', 'tan', 'sh', 'ch', 'log', 'lg'}
symbols = {'(', ')', '{', '}', '[', ']'}

def ifDigit(formula, index):
    nowNumb = formula[index]
    number = 0
    index += 1
    while (index < len(formula)):
        if (formula[index] in digits or formula[index] == '.' or formula[index] == ','):
            nowNumb += formula[index]
            index += 1
            if (formula[index - 1] == '.' or  formula[index - 1] == ','):
                number += 1
        else:
            break
    index -= 1
    if (nowNumb[-1] == '.' or nowNumb[-1] == ',' or number > 1):
        return ("error", index)
    return (nowNumb, index)

def word(formula, index):
    if (formula[index] == 'e'):
        return (formula[index], index)
    if (index < len(formula) - 1):
        if (formula[index : index + 2] in function or formula[index : index + 2] == "pi"):
            return (formula[index : index + 2], index + 1)
    if (index < len(formula) - 2):
        if (formula[index : index + 3] in function):
            return (formula[index : index + 3], index + 2)
    if (index < len(formula) - 4):
        if (formula[index : index + 5] in function):
            return (formula[index : index + 5], index + 4)
    if (index < len(formula) - 5):
        if (formula[index : index + 6] in function):
            return (formula[index : index + 6], index + 5)
    return("error", len(a))

def minus(formula, index):
    if (index + 1 == len(a)):
        return (error, len(formula))
    elif (a[index + 1] in digits):
        (nowNumb, index) = ifDigit(a, index)
        return(nowNumb, index)
    elif (a[index + 1] in {'(', '[', '{'}):
        index += 1
        return("-" + a[index], index)
    elif (a[index + 1] == '\\'):
        index += 2
        (nowNumb, index) = word(a, index)
        return("-" + nowNumb, index)
    else:
        index += 1
        (nowNumb, index) = word(a, index)
        return("-" + nowNumb, index)

def myFunc(a):
    answer = []
    index = 0
    for i in range(0, len(a)):
        if (a[index] in digits): #если появляется цифра, ты пытаемся считать число
            if (index > 0):
                if (answer[-1] in {'}', ']', ')', 'pi', 'e', '-pi', '-e'}):
                    answer.append('*');
            (nowNumb, index) = ifDigit(a, index)
            answer.append(nowNumb)
        elif (a[index] == '-' and len(answer) == 0): #если унарный минус в начале формулы
            (nowNumb, index) = minus(a, index)
            answer.append(nowNumb)
        elif (a[index] == '-' and (answer[-1] in {'(', '[', '{'} or answer[-1] in function)):
            (nowNumb, index) = minus(a, index)
            answer.append(nowNumb)
        elif (a[index] in operations or a[index] in symbols): #если скобка или операция
            if (index > 0 and a[index] in {'(', '{', '['}):
                if (answer[-1] in {'}', ']', ')', 'pi', 'e', '-pi', '-e'} or answer[-1][-1] in digits):
                    answer.append('*')
            answer.append(a[index])
        elif (a[index] == '\\'): #если появляется константа с backslach
            if (index > 0):
                if (answer[-1] in {'}', ']', ')', 'pi', 'e', '-pi', '-e'} or answer[-1][-1] in digits):
                    answer.append('*')
            index += 1
            (nowNumb, index) = word(a, index)
            answer.append(nowNumb)
        else:
            if (index > 0):
                if (answer[-1] in {'}', ']', ')', 'pi', 'e', '-pi', '-e'} or answer[-1][-1] in digits):
                    answer.append('*')
            (nowNumb, index) = word(a, index)
            answer.append(nowNumb)
        index += 1
        if (answer[-1] == 'log'):
            answer[-1] = 'lg'
        elif (answer[-1] == 'tan'):
            answer[-1] = 'tg'
        elif (answer[-1] == 'arctan'):
            answer[-1] = 'arctg'
        if (index > len(a) - 1):
            break
    return answer

a = input()

answ = myFunc(a)
print(answ)
